[{"/home/squenet/Documents/projects/simon/fourmis/src/App.js":"1","/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx":"2","/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js":"3"},{"size":10715,"mtime":1662298768109,"results":"4","hashOfConfig":"5"},{"size":856,"mtime":1662274106225,"results":"6","hashOfConfig":"5"},{"size":3896,"mtime":1662293441449,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18z8549",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/squenet/Documents/projects/simon/fourmis/src/App.js",["15","16"],"/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx",[],"/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js",["17","18","19"],"import { hex, hsl } from \"color-convert\";\nimport {\n  sides,\n  listOfDeaths,\n  displayWillBreed,\n  displayAntenna,\n  displaySensorArea,\n  displayEyes,\n  SENSOR_AREA,\n  NORMAL_MODE,\n  FLEEING_MODE,\n  HUNTING_MODE,\n  MATING_MODE,\n} from \"./App\";\n\nconst drawSensorArea = (ctx, ant) => {\n  ctx.lineWidth = 0.25;\n  ctx.strokeRect(\n    ant.x - SENSOR_AREA / 2,\n    ant.y - SENSOR_AREA / 2,\n    SENSOR_AREA,\n    SENSOR_AREA\n  );\n};\n\nconst drawEyes = (ctx, ant) => {\n  const [h, s, l] = hex.hsl(sides[ant.side].color.substring(1));\n\n  const eyeSize = 4;\n  ctx.beginPath();\n  //  ctx.fillStyle = `#${hsl.hex(h, s, l + 30)}`;\n  ctx.fillStyle = \"#ffffff\";\n  ctx.arc(\n    ant.x + Math.cos(ant.direction + Math.PI / 6) * ant.size,\n    ant.y + Math.sin(ant.direction + Math.PI / 6) * ant.size,\n    eyeSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.arc(\n    ant.x + Math.cos(ant.direction - Math.PI / 6) * ant.size,\n    ant.y + Math.sin(ant.direction - Math.PI / 6) * ant.size,\n    eyeSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.fill();\n\n  ctx.beginPath();\n  const pupilSize = ant.mode === NORMAL_MODE ? 2 : 3;\n  let pupilColor;\n  switch (ant.mode) {\n    case NORMAL_MODE:\n      pupilColor = \"#000000\";\n      break;\n    case FLEEING_MODE:\n      pupilColor = \"#008000\";\n      break;\n    case HUNTING_MODE:\n      pupilColor = \"#ff0000\";\n      debugger;\n      break;\n    case MATING_MODE:\n      pupilColor = \"#ff00ff\";\n      break;\n    default:\n      pupilColor = \"#000000\";\n  }\n\n  /// ctx.fillStyle = `#${hsl.hex(h, s, l - 30)}`;\n  ctx.fillStyle = pupilColor;\n  ctx.arc(\n    ant.x + Math.cos(ant.direction + Math.PI / 6) * ant.size,\n    ant.y + Math.sin(ant.direction + Math.PI / 6) * ant.size,\n    pupilSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.arc(\n    ant.x + Math.cos(ant.direction - Math.PI / 6) * ant.size,\n    ant.y + Math.sin(ant.direction - Math.PI / 6) * ant.size,\n    pupilSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.fill();\n};\n\nconst drawAntenna = (ctx, ant) => {\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.fillStyle = sides[ant.side].color;\n  ctx.lineWidth = 0.5;\n  ctx.beginPath();\n  ctx.moveTo(ant.x, ant.y);\n  ctx.lineTo(\n    ant.x + Math.cos(ant.direction - Math.PI / 6) * ant.size * 10,\n    ant.y + Math.sin(ant.direction - Math.PI / 6) * ant.size * 10\n  );\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.stroke();\n\n  ctx.lineWidth = 0.5;\n  ctx.beginPath();\n  ctx.moveTo(ant.x, ant.y);\n  ctx.lineTo(\n    ant.x + Math.cos(ant.direction + Math.PI / 6) * ant.size * 10,\n    ant.y + Math.sin(ant.direction + Math.PI / 6) * ant.size * 10\n  );\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.stroke();\n};\n\nexport const drawAnts = (ctx, ants) => {\n  ctx.strokeStyle = \"#331111\";\n  listOfDeaths.forEach((point) => {\n    ctx.beginPath();\n    ctx.fillRect(point.x, point.y, 1, 1);\n  });\n  ants.forEach((ant) => {\n    ctx.beginPath();\n    if (ant.maturity === \"elderly\") {\n      const [h, s, l] = hex.hsl(sides[ant.side].color.substring(1));\n      ctx.fillStyle = `#${hsl.hex(h, s / 2, l - 10)}`;\n    } else {\n      ctx.fillStyle = sides[ant.side].color;\n    }\n    ctx.ellipse(\n      ant.x,\n      ant.y,\n      ant.size * 2,\n      ant.size + ant.size * Math.abs(ant.oscillator),\n      ant.direction,\n      0,\n      2 * Math.PI\n    );\n    ctx.fill();\n    if (displayWillBreed && ant.bredRest > 0) {\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(ant.x, ant.y);\n    ctx.lineTo(\n      ant.x + Math.cos(ant.direction) * ant.size * 2,\n      ant.y + Math.sin(ant.direction) * ant.size * 2\n    );\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = sides[ant.side].color;\n    ctx.stroke();\n\n    if (displayAntenna) {\n      drawAntenna(ctx, ant);\n    }\n    if (displayEyes && ant.maturity === \"adult\") {\n      drawEyes(ctx, ant);\n    }\n\n    if (displaySensorArea) {\n      drawSensorArea(ctx, ant);\n    }\n  });\n};\n",{"ruleId":"20","severity":1,"message":"21","line":57,"column":7,"nodeType":"22","messageId":"23","endLine":57,"endColumn":28},{"ruleId":"20","severity":1,"message":"24","line":275,"column":7,"nodeType":"22","messageId":"23","endLine":275,"endColumn":20},{"ruleId":"20","severity":1,"message":"25","line":27,"column":10,"nodeType":"22","messageId":"23","endLine":27,"endColumn":11},{"ruleId":"20","severity":1,"message":"26","line":27,"column":13,"nodeType":"22","messageId":"23","endLine":27,"endColumn":14},{"ruleId":"20","severity":1,"message":"27","line":27,"column":16,"nodeType":"22","messageId":"23","endLine":27,"endColumn":17},"no-unused-vars","'areAntsSameGeneration' is assigned a value but never used.","Identifier","unusedVar","'handleFatigue' is assigned a value but never used.","'h' is assigned a value but never used.","'s' is assigned a value but never used.","'l' is assigned a value but never used."]