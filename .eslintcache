[{"/home/squenet/Documents/projects/simon/fourmis/src/App.js":"1","/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx":"2","/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js":"3"},{"size":8063,"mtime":1662282254919,"results":"4","hashOfConfig":"5"},{"size":856,"mtime":1662274106225,"results":"6","hashOfConfig":"5"},{"size":3062,"mtime":1662282241755,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"18z8549",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/squenet/Documents/projects/simon/fourmis/src/App.js",["15","16"],"import { v4 as uuidv4 } from \"uuid\";\nimport { hex, rgb } from \"color-convert\";\n\nimport \"./App.css\";\nimport AntHill from \"./components/Anthill\";\nimport { drawAnts } from \"./drawAnts\";\n\nconst DEFAULT_SPEED = 1;\nconst DEFAULT_ENERGY = 2;\n\nexport const SENSOR_AREA = 80;\n\nconst HEN_SIDE = \"HEN_SIDE\";\nconst VIPER_SIDE = \"VIPER_SIDE\";\nconst FOX_SIDE = \"FOX_SIDE\";\n\nexport const sides = {\n  [HEN_SIDE]: {\n    side: HEN_SIDE,\n    color: \"#995500\",\n    canKill: { [VIPER_SIDE]: true },\n  },\n  [VIPER_SIDE]: {\n    side: VIPER_SIDE,\n    color: \"#44CC44\",\n    canKill: { [FOX_SIDE]: true },\n  },\n  [FOX_SIDE]: {\n    side: FOX_SIDE,\n    color: \"#CC4444\",\n    canKill: { [HEN_SIDE]: true },\n  },\n};\n\nexport let displayAntenna = false;\nexport let displayWillBreed = false;\nexport let displaySensorArea = false;\nexport let displayEyes = true;\nexport let enablePrey = false;\n\nexport const listOfDeaths = [];\n\nconst areAntsSameGeneration = (ant, otherAnt) =>\n  ant.generation === otherAnt.generation;\nconst areNotSameAnts = (ant, otherAnt) => ant.id !== otherAnt.id;\nconst canBothAntsBreed = (ant, otherAnt) => ant.canBreed && otherAnt.canBreed;\nconst areCloseEnough = (ant, otherAnt) =>\n  Math.abs(otherAnt.x - ant.x) < 30 && Math.abs(otherAnt.y - ant.y) < 30;\nconst areAntsSameSide = (ant, otherAnt) => ant.side === otherAnt.side;\n\nconst isContactBetween = (ant, otherAnt) =>\n  areCloseEnough(ant, otherAnt) && areNotSameAnts(ant, otherAnt);\n\nconst canBothAntsHaveBaby = (ant, otherAnt) =>\n  ant.bredRest === 0 && otherAnt.bredRest === 0;\n\nconst canAntKillOtherAnt = (ant, otherAnt) =>\n  ant.maturity === \"adult\" && sides[ant.side].canKill[otherAnt.side];\n\nconst isAntAdult = (ant) => ant.maturity === \"adult\";\n\nconst randomSide = () => {\n  const sidesArray = Object.keys(sides);\n  const randomIndex = Math.floor(Math.random() * sidesArray.length);\n  return sidesArray[randomIndex];\n};\n\nconst antFactory = ({ side }) => ({\n  id: uuidv4(),\n  x: Math.floor(Math.random() * 3600) + 200,\n  y: Math.floor(Math.random() * 1600) + 200,\n  direction: Math.PI / 2,\n  speed: DEFAULT_SPEED,\n  energy: DEFAULT_ENERGY,\n  isTired: false,\n  color: \"#44CCCC\",\n  canBreed: false,\n  bredRest: 0,\n  size: 1,\n  age: 1,\n  maturity: \"child\",\n  generation: 1,\n  side: side ? side : randomSide(),\n});\n\nexport let ants = [];\n\nfor (var i = 0; i < 120; i++) {\n  ants.push(antFactory({}));\n}\n\ndocument.addEventListener(\n  \"keydown\",\n  (e) => {\n    if (e.key === \"v\") {\n      ants.push(antFactory({ side: VIPER_SIDE }));\n    }\n    if (e.key === \"f\") {\n      ants.push(antFactory({ side: FOX_SIDE }));\n    }\n    if (e.key === \"h\") {\n      ants.push(antFactory({ side: HEN_SIDE }));\n    }\n    if (e.key === \"b\") {\n      displayWillBreed = !displayWillBreed;\n    }\n    if (e.key === \"a\") {\n      displayAntenna = !displayAntenna;\n    }\n    if (e.key === \"s\") {\n      displaySensorArea = !displaySensorArea;\n    }\n    if (e.key === \"e\") {\n      displayEyes = !displayEyes;\n    }\n    if (e.key === \"k\") {\n      enablePrey = !enablePrey;\n    }\n  },\n  false\n);\n\nconst handleBirthday = () => {\n  ants.forEach((ant) => {\n    if (ant.bredRest > 0) {\n      ant.bredRest = ant.bredRest - 1;\n    }\n    ant.age = ant.age + 1;\n    if (ant.age < 100) {\n      ant.maturity = \"newborn\";\n      ant.size = 1;\n      ant.speed = 0;\n    } else if (ant.age < 200) {\n      ant.maturity = \"baby\";\n      ant.size = 2;\n      ant.speed = DEFAULT_SPEED;\n    } else if (ant.age < 600) {\n      ant.maturity = \"child\";\n      ant.size = 3;\n      ant.speed = DEFAULT_SPEED + 1;\n    } else if (ant.age < 4000) {\n      ant.maturity = \"adult\";\n      ant.size = 8;\n      ant.canBreed = true;\n      ant.speed = DEFAULT_SPEED + 2;\n    } else if (ant.age < 5000) {\n      ant.maturity = \"elderly\";\n      ant.size = 5;\n      ant.canBreed = false;\n      ant.speed = 1;\n      ant.energy = 5;\n      ant.speed = DEFAULT_SPEED;\n    } else {\n      ant.isDead = true;\n    }\n  });\n};\n\nconst handleDirectionChange = () => {\n  ants.forEach((ant) => {\n    const neighbors = ants.filter(\n      (otherAnt) =>\n        Math.abs(otherAnt.x - ant.x) < SENSOR_AREA &&\n        Math.abs(otherAnt.y - ant.y) < SENSOR_AREA &&\n        otherAnt.id !== ant.id\n    );\n    const adultNeighbors = neighbors.filter(\n      (otherAnt) => isAntAdult(otherAnt) && otherAnt.id !== ant.id\n    );\n\n    const threats = adultNeighbors.filter((otherAnt) =>\n      canAntKillOtherAnt(otherAnt, ant)\n    );\n    if (threats.length > 0) {\n      const threat = threats[0];\n      ant.direction = Math.PI + Math.atan2(threat.y - ant.y, threat.x - ant.x);\n    }\n\n    const mates = adultNeighbors.filter(\n      (otherAnt) =>\n        areAntsSameSide(ant, otherAnt) &&\n        canBothAntsHaveBaby(ant, otherAnt) &&\n        isAntAdult(ant)\n    );\n    if (mates.length > 0) {\n      const mate = mates[0];\n      ant.direction = Math.atan2(mate.y - ant.y, mate.x - ant.x);\n    }\n\n    if (enablePrey) {\n      const preys = neighbors.filter((otherAnt) =>\n        canAntKillOtherAnt(ant, otherAnt)\n      );\n      if (preys.length > 0) {\n        const prey = preys[0];\n        ant.direction = Math.atan2(prey.y - ant.y, prey.x - ant.x);\n      }\n    }\n\n    if (ant.x > 4000) {\n      ant.direction = Math.PI;\n    }\n    if (ant.x < 0) {\n      ant.direction = 0;\n    }\n    if (ant.y > 2000) {\n      ant.direction = (3 * Math.PI) / 2;\n    }\n    if (ant.y < 0) {\n      ant.direction = Math.PI / 2;\n    }\n\n    ant.direction =\n      -Math.PI / 18 + (Math.random() * Math.PI) / 9 + ant.direction;\n  });\n};\n\nconst handleMoveAnts = () => {\n  ants.forEach((ant) => {\n    if (!ant.isTired) {\n      ant.x = ant.x + Math.cos(ant.direction) * ant.speed;\n      ant.y = ant.y + Math.sin(ant.direction) * ant.speed;\n    }\n  });\n};\n\nconst handleFatigue = () => {\n  ants.forEach((ant) => {\n    if (ant.energy >= 0 && !ant.isTired) {\n      ant.energy = ant.energy - ant.speed;\n      if (ant.energy <= 0) {\n        ant.isTired = true;\n      }\n    }\n\n    if (ant.isTired && ant.energy <= 10) {\n      ant.energy = ant.energy + 1;\n      if (ant.energy >= 10) {\n        ant.isTired = false;\n      }\n    }\n  });\n};\n\nfunction handleBirth(ant, otherAnt) {\n  ant.bredRest = 800;\n  otherAnt.bredRest = 800;\n\n  const [r1, g1, b1] = hex.rgb(ant.color.substring(1));\n  const [r2, g2, b2] = hex.rgb(otherAnt.color.substring(1));\n\n  const rgbNewAnt = [\n    Math.floor(Math.sqrt((r1 * r1 + r2 * r2) / 2)),\n    Math.floor(Math.sqrt((g1 * g1 + g2 * g2) / 2)),\n    Math.floor(Math.sqrt((b1 * b1 + b2 * b2) / 2)),\n  ];\n\n  const newAnt = {\n    id: uuidv4(),\n    x: Math.floor(ant.x + otherAnt.x) / 2,\n    y: Math.floor(ant.y + otherAnt.y) / 2,\n    direction: 0,\n    speed: Math.floor(ant.speed + otherAnt.speed) / 2,\n    energy: DEFAULT_ENERGY,\n    color: `#${rgb.hex(rgbNewAnt)}`,\n    canBreed: false,\n    hasBred: false,\n    size: 1,\n    age: 0,\n    bredRest: 0,\n    generation: ant.generation + 1,\n    side: ant.side,\n  };\n  ants.push(newAnt);\n}\n\nconst handleContacts = () => {\n  ants.forEach((ant) => {\n    ants.forEach((otherAnt) => {\n      if (isContactBetween(ant, otherAnt)) {\n        if (\n          areAntsSameSide(ant, otherAnt) &&\n          canBothAntsBreed(ant, otherAnt) &&\n          canBothAntsHaveBaby(ant, otherAnt)\n        ) {\n          handleBirth(ant, otherAnt);\n        } else {\n          if (!areAntsSameSide(ant, otherAnt)) {\n            if (canAntKillOtherAnt(ant, otherAnt) && isAntAdult(ant)) {\n              otherAnt.isDead = true;\n              listOfDeaths.push({ x: otherAnt.x, y: otherAnt.y });\n            }\n          }\n        }\n      }\n    });\n  });\n};\n\nconst handleDeaths = () => {\n  ants = ants.filter((ant) => !ant.isDead);\n};\n\nfunction App() {\n  const draw = (ctx, frameCount) => {\n    ctx.beginPath();\n    ctx.fillStyle = \"#202020\";\n    ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fillText(frameCount, 10, 10);\n    handleBirthday();\n    handleDeaths();\n    drawAnts(ctx, ants);\n    handleDirectionChange();\n    handleMoveAnts();\n    handleContacts();\n  };\n\n  return (\n    <div className=\"App\">\n      <AntHill draw={draw} />\n    </div>\n  );\n}\n\nexport default App;\n","/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx",[],"/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js",["17","18","19","20"],{"ruleId":"21","severity":1,"message":"22","line":43,"column":7,"nodeType":"23","messageId":"24","endLine":43,"endColumn":28},{"ruleId":"21","severity":1,"message":"25","line":227,"column":7,"nodeType":"23","messageId":"24","endLine":227,"endColumn":20},{"ruleId":"21","severity":1,"message":"26","line":1,"column":15,"nodeType":"23","messageId":"24","endLine":1,"endColumn":18},{"ruleId":"21","severity":1,"message":"27","line":23,"column":10,"nodeType":"23","messageId":"24","endLine":23,"endColumn":11},{"ruleId":"21","severity":1,"message":"28","line":23,"column":13,"nodeType":"23","messageId":"24","endLine":23,"endColumn":14},{"ruleId":"21","severity":1,"message":"29","line":23,"column":16,"nodeType":"23","messageId":"24","endLine":23,"endColumn":17},"no-unused-vars","'areAntsSameGeneration' is assigned a value but never used.","Identifier","unusedVar","'handleFatigue' is assigned a value but never used.","'hsl' is defined but never used.","'h' is assigned a value but never used.","'s' is assigned a value but never used.","'l' is assigned a value but never used."]