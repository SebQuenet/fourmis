[{"/home/squenet/Documents/projects/simon/fourmis/src/App.js":"1","/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx":"2","/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js":"3","/home/squenet/Documents/projects/simon/fourmis/src/reportWebVitals.js":"4","/home/squenet/Documents/projects/simon/fourmis/src/index.js":"5","/home/squenet/Documents/projects/simon/fourmis/src/displayHelp.js":"6"},{"size":18812,"mtime":1662485699831,"results":"7","hashOfConfig":"8"},{"size":1614,"mtime":1662411216145,"results":"9","hashOfConfig":"8"},{"size":7486,"mtime":1662485799107,"results":"10","hashOfConfig":"8"},{"size":362,"mtime":1662221629758,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1662221629758,"results":"12","hashOfConfig":"8"},{"size":3301,"mtime":1662483789149,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18z8549",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/squenet/Documents/projects/simon/fourmis/src/App.js",["28"],"/home/squenet/Documents/projects/simon/fourmis/src/components/Anthill/index.jsx",["29"],"import React, { useRef, useEffect } from 'react';\nimport styles from './AntHill.module.css';\n\nconst CANVAS_WIDTH = 4000;\nconst CANVAS_HEIGHT = 2000;\n\nconst AntHill = (props) => {\n  const canvasRef = useRef(null);\n  const { draw, handleClick, handleMouseMove } = props;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    let frameCount = 0;\n    let animationFrameId;\n\n    canvas.addEventListener('mousemove', (e) => {\n      const canvasWidth = canvas.getBoundingClientRect().width;\n      const canvasHeight = canvas.getBoundingClientRect().height;\n      const canvasX = e.clientX*CANVAS_WIDTH/canvasWidth;\n      const canvasY = e.clientY*CANVAS_HEIGHT/canvasHeight;\n      handleMouseMove({canvasX, canvasY});\n    }, false);\n    canvas.addEventListener('click', (e) => {\n      const canvasWidth = canvas.getBoundingClientRect().width;\n      const canvasHeight = canvas.getBoundingClientRect().height;\n      const canvasX = e.clientX*CANVAS_WIDTH/canvasWidth;\n      const canvasY = e.clientY*CANVAS_HEIGHT/canvasHeight;\n      handleClick({canvasX, canvasY});\n    }, false);\n\n    const render = () => {\n      frameCount++\n      draw(context, frameCount)\n      animationFrameId = window.requestAnimationFrame(render)\n    }\n    render()\n\n    return () => {\n      window.cancelAnimationFrame(animationFrameId)\n    }\n  }, [draw]);\n\n  console.log(window.innerWidth / 2);\n  console.log(window.innerHeight/ 2);\n  return <canvas width={CANVAS_WIDTH} height={CANVAS_HEIGHT} className={styles.canvasSupport} ref={canvasRef}{...props}></canvas>\n};\n\nexport default AntHill;","/home/squenet/Documents/projects/simon/fourmis/src/drawAnts.js",["30","31","32"],"import { hex, hsl } from \"color-convert\";\nimport {\n  sides,\n  listOfDeaths,\n  displayWillBreed,\n  displayAntenna,\n  displaySensorArea,\n  displayEyes,\n  displayFood,\n  maturities,\n  NORMAL_MODE,\n  FLEEING_MODE,\n  HUNTING_MODE,\n  MATING_MODE,\n} from \"./App\";\n\nconst drawPerceptionCircles = (ctx, ant) => {\n  ctx.beginPath();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = \"#C0E0C0\";\n  ctx.arc(ant.x, ant.y, ant.perceptionArea, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  ctx.font = \"20px monospace\";\n  ctx.fillStyle = \"#C0E0C0\";\n  ctx.fillText(\n    `${Math.floor(ant.perceptionArea)}`,\n    ant.x - ant.perceptionArea + 5,\n    ant.y\n  );\n\n  ctx.beginPath();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = \"#E0C0C0\";\n  ctx.arc(ant.x, ant.y, ant.trackingArea, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  ctx.font = \"20px monospace\";\n  ctx.fillStyle = \"#E0C0C0\";\n  ctx.fillText(\n    `${Math.floor(ant.trackingArea)}`,\n    ant.x + ant.trackingArea - 30,\n    ant.y\n  );\n\n  ctx.beginPath();\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = \"#E0C0D0\";\n  ctx.arc(ant.x, ant.y, ant.pheromonsArea, 0, 2 * Math.PI);\n  ctx.stroke();\n\n  ctx.font = \"20px monospace\";\n  ctx.fillStyle = \"#E0C0D0\";\n  ctx.fillText(\n    `${Math.floor(ant.pheromonsArea)}`,\n    ant.x,\n    ant.y - ant.pheromonsArea + 5\n  );\n};\n\nconst drawSensorArea = (ctx, ant) => {\n  ctx.lineWidth = 0.25;\n  ctx.strokeRect(\n    ant.x - ant.sensorArea / 2,\n    ant.y - ant.sensorArea / 2,\n    ant.sensorArea,\n    ant.sensorArea\n  );\n  ctx.font = \"16px monospace\";\n  ctx.fillStyle = sides[ant.side].color;\n  ctx.fillText(\n    `${Math.floor(ant.sensorArea)}`,\n    ant.x - ant.sensorArea / 2,\n    ant.y - ant.sensorArea / 2\n  );\n  ctx.fillText(\n    `${Math.floor(ant.speed * 10)}`,\n    ant.x + ant.sensorArea / 2 - 12,\n    ant.y - ant.sensorArea / 2\n  );\n  ctx.fillText(\n    `${Math.floor(ant.generation)}`,\n    ant.x,\n    ant.y - ant.sensorArea / 2\n  );\n};\n\nconst drawEyes = (ctx, ant) => {\n  const [h, s, l] = hex.hsl(sides[ant.side].color.substring(1));\n\n  const eyeSize = 4;\n  ctx.beginPath();\n  //  ctx.fillStyle = `#${hsl.hex(h, s, l + 30)}`;\n  ctx.fillStyle = \"#ffffff\";\n  ctx.arc(\n    ant.x +\n      Math.cos(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    ant.y +\n      Math.sin(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    eyeSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.arc(\n    ant.x +\n      Math.cos(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    ant.y +\n      Math.sin(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    eyeSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.fill();\n\n  ctx.beginPath();\n  const pupilSize = ant.mode === NORMAL_MODE ? 2 : 3;\n  let pupilColor;\n  switch (ant.mode) {\n    case NORMAL_MODE:\n      pupilColor = \"#000000\";\n      break;\n    case FLEEING_MODE:\n      pupilColor = \"#008000\";\n      break;\n    case HUNTING_MODE:\n      pupilColor = \"#ff0000\";\n      break;\n    case MATING_MODE:\n      pupilColor = \"#ff00ff\";\n      break;\n    default:\n      pupilColor = \"#000000\";\n  }\n\n  /// ctx.fillStyle = `#${hsl.hex(h, s, l - 30)}`;\n  ctx.fillStyle = pupilColor;\n  ctx.arc(\n    ant.x +\n      Math.cos(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    ant.y +\n      Math.sin(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    pupilSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.arc(\n    ant.x +\n      Math.cos(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    ant.y +\n      Math.sin(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size,\n    pupilSize,\n    0,\n    2 * Math.PI\n  );\n  ctx.fill();\n};\n\nconst drawAntenna = (ctx, ant) => {\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.fillStyle = sides[ant.side].color;\n  ctx.lineWidth = 0.5;\n  ctx.beginPath();\n  ctx.moveTo(ant.x, ant.y);\n  ctx.lineTo(\n    ant.x +\n      Math.cos(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size *\n        10,\n    ant.y +\n      Math.sin(ant.direction - Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size *\n        10\n  );\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.stroke();\n\n  ctx.lineWidth = 0.5;\n  ctx.beginPath();\n  ctx.moveTo(ant.x, ant.y);\n  ctx.lineTo(\n    ant.x +\n      Math.cos(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size *\n        10,\n    ant.y +\n      Math.sin(ant.direction + Math.PI / 6) *\n        maturities[ant.maturity].size *\n        ant.size *\n        10\n  );\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = sides[ant.side].color;\n  ctx.stroke();\n};\n\nexport const drawAnts = (ctx, ants) => {\n  ctx.strokeStyle = \"#331111\";\n  listOfDeaths.forEach((point) => {\n    ctx.beginPath();\n    ctx.fillRect(point.x, point.y, 1, 1);\n  });\n  ants.forEach((ant) => {\n    ctx.beginPath();\n    if (ant.maturity === \"elderly\") {\n      const [h, s, l] = hex.hsl(sides[ant.side].color.substring(1));\n      ctx.fillStyle = `#${hsl.hex(h, s / 2, l - 10)}`;\n    } else {\n      ctx.fillStyle = sides[ant.side].color;\n    }\n    ctx.ellipse(\n      ant.x,\n      ant.y,\n      maturities[ant.maturity].size * ant.size * 2,\n      maturities[ant.maturity].size * ant.size +\n        maturities[ant.maturity].size * ant.size * Math.abs(ant.oscillator),\n      ant.direction,\n      0,\n      2 * Math.PI\n    );\n    ctx.fill();\n    if (displayWillBreed && ant.bredRest > 0) {\n      ctx.strokeStyle = \"#ffffff\";\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n    if (displayFood) {\n      if (ant.food < 500) {\n        ctx.strokeStyle = \"#ff0000\";\n        ctx.lineWidth = 3;\n        ctx.stroke();\n      } else if (ant.food < 1000) {\n        ctx.strokeStyle = \"#ffff00\";\n        ctx.lineWidth = 3;\n        ctx.stroke();\n      } else if (ant.food < 2000) {\n        ctx.strokeStyle = \"#00ff00\";\n        ctx.lineWidth = 3;\n        ctx.stroke();\n      }\n    }\n    if (ant.isInjuried) {\n      ctx.beginPath();\n      ctx.fillStyle = \"#ff0000\";\n      ctx.ellipse(\n        ant.x,\n        ant.y,\n        maturities[ant.maturity].size * ant.size * 2,\n        maturities[ant.maturity].size * ant.size +\n          maturities[ant.maturity].size * ant.size * Math.abs(ant.oscillator),\n        ant.direction,\n        Math.PI - Math.PI / 3,\n        Math.PI + Math.PI / 3\n      );\n      ctx.fill();\n    }\n\n    ctx.beginPath();\n    ctx.moveTo(ant.x, ant.y);\n    ctx.lineTo(\n      ant.x +\n        Math.cos(ant.direction) * maturities[ant.maturity].size * ant.size * 2,\n      ant.y +\n        Math.sin(ant.direction) * maturities[ant.maturity].size * ant.size * 2\n    );\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = sides[ant.side].color;\n    ctx.stroke();\n\n    if (displayAntenna) {\n      drawAntenna(ctx, ant);\n    }\n    if (\n      displayEyes &&\n      (ant.maturity === \"adult\" ||\n        ant.maturity === \"elderly\" ||\n        ant.maturity === \"child\" ||\n        ant.maturity === \"baby\")\n    ) {\n      drawEyes(ctx, ant);\n    }\n\n    if (displaySensorArea) {\n      drawSensorArea(ctx, ant);\n      drawPerceptionCircles(ctx, ant);\n    }\n    if (ant.isSelected) {\n      ctx.beginPath();\n      ctx.strokeStyle = \"#ff8888\";\n      ctx.fillStyle = \"#ffffff\";\n      ctx.lineWidth = 3;\n      ctx.arc(\n        ant.x,\n        ant.y,\n        maturities[ant.maturity].size * ant.size * 3,\n        0,\n        2 * Math.PI\n      );\n      ctx.stroke();\n    }\n  });\n};\n","/home/squenet/Documents/projects/simon/fourmis/src/reportWebVitals.js",[],"/home/squenet/Documents/projects/simon/fourmis/src/index.js",[],"/home/squenet/Documents/projects/simon/fourmis/src/displayHelp.js",[],{"ruleId":"33","severity":1,"message":"34","line":134,"column":7,"nodeType":"35","messageId":"36","endLine":134,"endColumn":28},{"ruleId":"37","severity":1,"message":"38","line":42,"column":6,"nodeType":"39","endLine":42,"endColumn":12,"suggestions":"40"},{"ruleId":"33","severity":1,"message":"41","line":89,"column":10,"nodeType":"35","messageId":"36","endLine":89,"endColumn":11},{"ruleId":"33","severity":1,"message":"42","line":89,"column":13,"nodeType":"35","messageId":"36","endLine":89,"endColumn":14},{"ruleId":"33","severity":1,"message":"43","line":89,"column":16,"nodeType":"35","messageId":"36","endLine":89,"endColumn":17},"no-unused-vars","'areAntsSameGeneration' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'handleClick' and 'handleMouseMove'. Either include them or remove the dependency array.","ArrayExpression",["44"],"'h' is assigned a value but never used.","'s' is assigned a value but never used.","'l' is assigned a value but never used.",{"desc":"45","fix":"46"},"Update the dependencies array to be: [draw, handleClick, handleMouseMove]",{"range":"47","text":"48"},[1371,1377],"[draw, handleClick, handleMouseMove]"]